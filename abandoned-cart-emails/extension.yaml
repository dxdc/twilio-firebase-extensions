name: abandoned-cart-emails
version: 0.1.3
specVersion: v1beta

displayName: Send Abandoned Cart Reminders with SendGrid
description: Watches a cart collection keeping track of the last updated time of a cart object. When it is over a certain period, send the user an email based on a SendGrid Dynamic Template.

license: Apache-2.0

sourceUrl: https://github.com/twilio-labs/twilio-firebase-extensions/tree/main/abandoned-cart-emails
releaseNotesUrl: https://github.com/firebase/extensions/blob/main/abandoned-cart-emails/CHANGELOG.md

author:
  authorName: Twilio
  url: https://www.twilio.com

contributors:
  - authorName: Phil Nash
    email: philnash@twilio.com
    url: https://philna.sh

billingRequired: true

externalServices:
  - name: Twilio SendGrid
    PricingUri: https://sendgrid.com/pricing/

roles:
  - role: datastore.user
    reason: Allows this extension to access Cloud Firestore to read and process added message documents.

  - role: firebaseauth.viewer
    reason: Allows this extension to access Firebase Auth to read user information.

resources:
  - name: processEmailQueue
    type: firebaseextensions.v1beta.function
    description: >-
      Processes document changes in the specified Cloud Firestore collection,
      delivers emails, and updates the document with delivery status information.
    properties:
      location: ${param:LOCATION}
      runtime: nodejs18
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.write
        resource: projects/${param:PROJECT_ID}/databases/(default)/documents/${param:EMAIL_COLLECTION}/{id}
  - name: processCartUpdate
    type: firebaseextensions.v1beta.function
    description: >-
      Processes changes to documents in the collection that represent a shopping
      cart, adding metadata about the document, specifically a last updated
      field that can be used to determine whether the cart has been abandoned.
    properties:
      location: ${param:LOCATION}
      runtime: nodejs18
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.write
        resource: projects/${param:PROJECT_ID}/databases/(default)/documents/${param:CART_COLLECTION}/{id}
  - name: processCartCheck
    type: firebaseextensions.v1beta.function
    description: >-
      Runs periodically to check any carts that have been abandoned. If they
      have adds the details from the cart to the email collection so that an
      email can be sent out.
    properties:
      location: ${param:LOCATION}
      runtime: nodejs18
      scheduleTrigger:
        schedule: ${param:CART_CHECK_INTERVAL}

params:
  - param: LOCATION
    label: Cloud Functions location
    description: >-
      Where do you want to deploy the functions created for this extension?
      You usually want a location close to your database. For help selecting a
      location, refer to the [location selection
      guide](https://firebase.google.com/docs/functions/locations).
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Warsaw (europe-central2)
        value: europe-central2
      - label: Los Angeles (us-west2)
        value: us-west2
      - label: Salt Lake City (us-west3)
        value: us-west3
      - label: Las Vegas (us-west4)
        value: us-west4
      - label: Warsaw (europe-central2)
        value: europe-central2
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Zurich (europe-west6)
        value: europe-west6
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
      - label: Osaka (asia-northeast2)
        value: asia-northeast2
      - label: Seoul (asia-northeast3)
        value: asia-northeast3
      - label: Mumbai (asia-south1)
        value: asia-south1
      - label: Jakarta (asia-southeast2)
        value: asia-southeast2
      - label: Montreal (northamerica-northeast1)
        value: northamerica-northeast1
      - label: Sao Paulo (southamerica-east1)
        value: southamerica-east1
      - label: Sydney (australia-southeast1)
        value: australia-southeast1
    default: us-central1
    required: true
    immutable: true

  - param: SENDGRID_API_KEY
    label: SendGrid API Key
    description: >-
      What is your SendGrid API key? Make sure it has permission to send emails.
    type: secret
    example: SG.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
    # validationRegex: ^SG\.[a-zA-Z0-9\.\-_]+$
    # validationErrorMessage: Invalid SendGrid API Key. Must be in the form `SG.xxx`.
    required: true

  - param: EMAIL_COLLECTION
    label: Email documents collection
    description: >-
      What is the path to the collection that contains the documents used to build and send the emails?
    type: string
    default: cart_emails
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Must be a valid Cloud Firestore collection.
    required: true

  - param: DEFAULT_FROM
    label: Default from email address
    description: What is the default email address to send the emails from?
    type: string
    required: true

  - param: DEFAULT_REPLY_TO
    label: Default email to set as reply-to
    description: What is the default email address to set as the email reply-to field?
    type: string
    required: false

  - param: DEFAULT_TEMPLATE_ID
    label: Default email dynamic template ID
    description: What is the SendGrid Dynamic Template ID that you want to use by default
    type: string
    required: true

  - param: CART_COLLECTION
    label: The collection your shopping cart is stored in
    description: >-
      What is is the collection that this extension should observe in order to calculate whether a cart has been abandoned?
    type: string
    required: true

  - param: ABANDONED_TIMEOUT
    label: Time in minutes
    description: >-
      What is the amount of time in minutes a cart is inactive before this extension will send them an email?
    type: string
    default: "180"
    example: "180"
    validationRegex: ^\d+$
    validationErrorMessage: "Invalid abandoned timeout, please enter a whole number of minutes."
    required: true

  - param: CART_CHECK_INTERVAL
    label: Schedule for the check for abandoned carts
    description: >-
      On what schedule should the cart collection be checked for abandoned carts? You can provide this in [App Engine cron.yaml syntax](https://cloud.google.com/appengine/docs/standard/python/config/cronref).
    type: string
    default: "every 5 minutes"
    example: "every 5 minutes"
    required: true
